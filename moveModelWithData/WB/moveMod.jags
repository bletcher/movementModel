    model {
    
    # Priors and constraints

    for( s in 1:nSeasons ) {
      for(r in 1:(nRivers)){
        for(r2 in 1:(nRivers-1)){
          
          psiBeta[r,r2,s] ~ dnorm( 0,0.1 ) #1/2.25) 
          psiBeta01[r,r2,s] <- exp( psiBeta[r,r2,s] )/( exp( psiBeta[r,r2,s] ) + 1 )

          # Note that with precision priors on psiBeta of 1/2.25 (value from the paper) estimates of psiBeta01 when r,r2,t sets have no transitions 
          # don't bump up against 0, but they are > 0 (~0.005). Smaller priors (<0.01) give spikey estimates of psiBeta01 with poor r-hats.
          # 0.1 is a reasonable compromise. Alternavitvely could stick with 1/2.25 (which samples better) and convert estimates of < 0.005 to 0

        }
      }  
    # set transitions into OB (#4) to 0
      psiBeta[1,4,s] <- -6
      psiBeta[2,4,s] <- -6
      psiBeta[3,4,s] <- -6
      psiBeta[4,4,s] ~ dnorm( 0,0.1 )
      
      psiBeta01[1,4,s] <- exp( psiBeta[1,4,s] )/( exp( psiBeta[1,4,s] ) + 1 )
      psiBeta01[2,4,s] <- exp( psiBeta[2,4,s] )/( exp( psiBeta[2,4,s] ) + 1 )
      psiBeta01[3,4,s] <- exp( psiBeta[3,4,s] )/( exp( psiBeta[3,4,s] ) + 1 )
      psiBeta01[4,4,s] <- exp( psiBeta[4,4,s] )/( exp( psiBeta[4,4,s] ) + 1 )
    }

    ############################
    ######## psi model #########
    ############################
    # note that 'riverDATA' is equivalent to 'r1'    

    for( i in 1:nEvalRows ){

      sumPsi[evalRows[i]] <- sum(ePsi[evalRows[i],])
    
      for( r2 in 1:nRivers ){
        # normal priors on logit
        lpsi[evalRows[i],r2] <- psiBeta[ riverDATA[evalRows[i]], r2, season[evalRows[i]] ] # psiBeta[r,r,] is not estimated. Get by difference.    
    
        ePsi[evalRows[i],r2] <- exp(lpsi[evalRows[i],r2])*(1-(riverDATA[evalRows[i]]==r2))
    
        #Constrain each set of psi's to sum to one
        psi[evalRows[i],r2] <- ( ePsi[evalRows[i],r2] / ( 1 + sumPsi[evalRows[i]]) ) * ( 1 - (riverDATA[evalRows[i]]==r2) ) # prob of moving to r2
                                                + ( 1 / ( 1 + sumPsi[evalRows[i]]) ) * (      riverDATA[evalRows[i]]==r2 )  # prob of staying in current location
      }
    }

    ############################
    ##### Likelihoods ##########
    ############################

#    for(i in 1:nFirstObsRows){
#       zRiv[ firstObsRows[i] ] <- riverDATA[ firstObsRows[i] ] 
#   }
    
    for(i in 1:nEvalRows){

      # State of location (zRiv)
      riverDATA[ evalRows[i] + 1 ] ~ dcat( psi[ evalRows[i], ]  )
#      zRiv[ evalRows[i] + 1 ] <- riverDATA[ evalRows[i] + 1 ] # this was used to truncate occasions to when z==1 
    }

  } # model
    
